### as multiple attachments
Sub SendEmailWithMultipleAttachments()
    Dim outlookApp As Object
    Dim outlookMail As Object
    Dim tempFilePath1 As String
    Dim tempFilePath2 As String

    ' 创建Outlook应用实例
    Set outlookApp = CreateObject("Outlook.Application")
    Set outlookMail = outlookApp.CreateItem(0)

    ' 假设已经有两个文件路径
    tempFilePath1 = "C:\Path\To\Your\FirstFile.xlsx"
    tempFilePath2 = "C:\Path\To\Your\SecondFile.pdf"

    ' 配置邮件参数
    With outlookMail
        .To = "receiver@example.com"
        .Subject = "Multiple Attachments Example"
        .Body = "Here are the attachments."
        
        ' 添加多个附件
        .Attachments.Add tempFilePath1
        .Attachments.Add tempFilePath2
        
        .Send ' 发送邮件
    End With

    ' 清理对象
    Set outlookMail = Nothing
    Set outlookApp = Nothing
End Sub



### as attachment1
Sub SendSingleSheetAsAttachment()
    Dim outlookApp As Object
    Dim outlookMail As Object
    Dim newWorkbook As Workbook
    Dim sheetName As String
    Dim tempFilePath As String

    ' 指定要发送的工作表名称
    sheetName = "Sheet1" ' 根据实际的工作表名修改

    ' 创建Outlook应用实例
    Set outlookApp = CreateObject("Outlook.Application")
    Set outlookMail = outlookApp.CreateItem(0)

    ' 复制指定工作表到新工作簿
    ThisWorkbook.Sheets(sheetName).Copy
    Set newWorkbook = ActiveWorkbook

    ' 保存新工作簿到临时文件路径
    tempFilePath = Environ("TEMP") & "\" & sheetName & ".xlsx"
    newWorkbook.SaveAs Filename:=tempFilePath

    ' 配置邮件参数
    With outlookMail
        .To = receiverEmail
        .Subject = emailSubject
        .Body = "Attached is the " & sheetName & " worksheet."
        .Attachments.Add tempFilePath
        .Send ' 发送邮件
    End With

    ' 清理和关闭新工作簿
    newWorkbook.Close SaveChanges:=False
    Set newWorkbook = Nothing

    ' 清理Outlook对象
    Set outlookMail = Nothing
    Set outlookApp = Nothing

    ' 可选：删除临时文件
    Kill tempFilePath
End Sub






### as attachment
Sub SendWorkbookAsAttachment()
    Dim outlookApp As Object
    Dim outlookMail As Object
    Dim strPath As String

    ' 保存当前工作簿
    strPath = ThisWorkbook.Path & "\TemporaryCopy.xlsx"
    ThisWorkbook.SaveCopyAs strPath

    ' 创建Outlook应用实例
    Set outlookApp = CreateObject("Outlook.Application")
    Set outlookMail = outlookApp.CreateItem(0)

    ' 配置邮件参数
    With outlookMail
        .To = receiverEmail
        .Subject = emailSubject
        .Body = "请查看附件中的Excel文件。"
        .Attachments.Add strPath
        .Send
    End With

    ' 清理对象
    Set outlookMail = Nothing
    Set outlookApp = Nothing
End Sub

### 3. 使用高级方法保留格式：生成HTML代码

如果你想更精确地控制邮件中的格式，并确保它看起来尽可能接近Excel中的显示，你可以考虑生成HTML代码来模拟工作表的格式。这需要对HTML有一定的了解，因为你将需要手动创建表格、颜色和样式。

```vba
Sub SendFormattedSheetAsHTML()
    Dim outlookApp As Object
    Dim outlookMail As Object
    Dim rng As Range
    Dim cell As Range
    Dim htmlStr As String
    Dim rowStr As String
    Dim cellStyle As String

    ' 创建Outlook应用实例
    Set outlookApp = CreateObject("Outlook.Application")
    Set outlookMail = outlookApp.CreateItem(0)

    ' 设置要发送的工作表和区域
    Set rng = ThisWorkbook.Sheets("Sheet1").UsedRange
    htmlStr = "<html><body><table border='1'>"

    ' 生成HTML表格
    For Each row In rng.Rows
        rowStr = "<tr>"
        For Each cell In row.Cells
            cellStyle = "style='background-color: " & Hex(cell.Interior.Color) & ";"
            cellStyle = cellStyle & "color: " & Hex(cell.Font.Color) & ";"
            cellStyle = cellStyle & "font-size: " & cell.Font.Size & "pt;'"
            rowStr = rowStr & "<td " & cellStyle & ">" & cell.Value & "</td>"
        Next cell
        rowStr = rowStr & "</tr>"
        htmlStr = htmlStr & rowStr
    Next row
    htmlStr = htmlStr & "</table></body></html>"

    ' 发送邮件
    With outlookMail
        .To = receiverEmail
        .Subject = emailSubject
        .HTMLBody = htmlStr
        .Send
    End With

    ' 清理对象
    Set outlookMail = Nothing
    Set outlookApp = Nothing
End Sub



Sub SendEmailWithSpecificSheetContents()
    Dim outlookApp As Object
    Dim outlookMail As Object
    Dim rng As Range
    Dim strbody As String
    Dim ws As Worksheet
    
    ' 创建Outlook应用实例
    Set outlookApp = CreateObject("Outlook.Application")
    Set outlookMail = outlookApp.CreateItem(0)
    
    ' 设置特定的工作表
    Set ws = ThisWorkbook.Sheets("Sheet1")
    
    ' 定义要发送的区域，这里选择的是指定工作表的使用范围
    With ws
        Set rng = .UsedRange ' 可以根据需要调整为特定的范围
        ' 这里需要一个循环来构建整个区域的文本内容
        strbody = ""
        For Each row In rng.Rows
            For Each cell In row.Cells
                strbody = strbody & cell.Value & "  " ' 添加额外的空格作为列之间的分隔
            Next cell
            strbody = strbody & vbCrLf ' 添加换行符来分隔行
        Next row
    End With
    
    ' 配置邮件参数
    With outlookMail
        .To = receiverEmail  ' 使用全局变量
        .CC = ""  ' 抄送地址，如果不需要可以留空
        .BCC = "" ' 密送地址，如果不需要可以留空
        .Subject = emailSubject  ' 使用全局变量
        .Body = strbody  ' 使用构建的strbody作为邮件正文
        .Send   ' 发送邮件
    End With
    
    ' 清理对象
    Set outlookMail = Nothing
    Set outlookApp = Nothing
    Set ws = Nothing
End Sub
